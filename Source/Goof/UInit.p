unit UInit;{Initialisation code common to application and DA versions}interface	uses		ObjIntf, UGoof;	procedure MakeCmdTable (numEntries: integer);	procedure BuildCmdTableEntry (entryNum: integer; menu: MenuHandle);	procedure InitDummyPort;	procedure InitDragBounds;	procedure InitGlobals;	procedure CommonInit;implementation	procedure MakeCmdTable (numEntries: integer);	begin		gCmdTable := CmdTableHandle(NewHandle(sizeof(CmdTable) + (numEntries - 255) * sizeof(CmdListHandle)));		gCmdTable^^.theNumMenus := numEntries;	end;	procedure BuildCmdTableEntry (entryNum: integer; menu: MenuHandle);		var			itemNum, numItems, lbPos, rbPos: integer;			itemString: Str255;			cmdNumber: longint;			cList: CmdListHandle;	begin		numItems := CountMItems(menu);		cList := CmdListHandle(NewHandle(sizeof(CmdList) + (numItems - 255) * sizeof(integer)));		cList^^.theMenuID := menu^^.menuID;		cList^^.theNumItems := numItems;		gCmdTable^^.theMenus[entryNum] := cList;		for itemNum := 1 to numItems do begin				GetItem(menu, itemNum, itemString);				lbPos := Pos('[', itemString);				rbPos := Pos(']', itemString);				if (lbPos > 0) & (rbPos > lbPos) then begin						StringToNum(Copy(itemString, lbPos + 1, rbPos - lbPos - 1), cmdNumber);						Delete(itemString, lbPos, rbPos - lbPos + 1);						SetItem(menu, itemNum, itemString);					end				else					cmdNumber := 0;				cList^^.theItems[itemNum] := cmdNumber;			end;	end;	procedure InitDummyPort;		var			r: Rect;	begin		New(gDummyPort);		OpenPort(gDummyPort);		SetRect(r, 0, 0, 0, 0);		ClipRect(r);	end;	procedure InitDragBounds;	begin{gDragBounds := gDummyPort^.portBits.bounds;}		gDragBounds := screenBits.bounds;		with gDragBounds do			top := top + 20;		InsetRect(gDragBounds, 4, 4);	end;	procedure InitGlobals;	begin		gTarget := gDefaultTarget;		gHeadDocument := nil;		gCurrentFocus := nil;		gFrontWindow := nil;		gCurrentCursor := nil;		gNextDocNumber := 1;		gTempRgn := NewRgn;		gDblTime := GetDblTime;		gLastClickTime := 0;		SetPt(gLastClickLoc, 0, 0);		gNumClicks := 0;		with gWinPosRec do begin				SetPt(theLimits.topLeft, gDragBounds.left, gDragBounds.top + 20);				theLimits.right := theLimits.left + 41;				theLimits.bottom := theLimits.top + 70;				SetPt(theNextPos, theLimits.left, theLimits.top);				SetPt(theIncrement, 4, 16);				theDefaultBotRight := gDragBounds.botRight;			end;	end;	procedure CommonInit;	begin		InitDummyPort;		InitDragBounds;		InitGlobals;		InitCursor;	end;end.