unit UXWindow;interface	uses		UGoof;	const		fill = -1;		{For use in width, height of TXWindow.Place}		natural = -2;	type		PlaceOption = (plcHFill, plcVFill);		PlaceOptions = set of PlaceOption;		TXWindow = object(TWindow)				procedure Place (view: TView; beside, below: TView; hOffset, vOffset, width, height: integer; frameOpts: FrameOptions);				function Changed: boolean;				function Flush: boolean;				procedure Close;				override;			end;implementation	procedure TXWindow.Place (view: TView; beside, below: TView; hOffset, vOffset, width, height: integer; frameOpts: FrameOptions);		var			bounds: Rect;			extent: Rect;			frame: TFrame;	begin		extent := fBounds;		OffsetRect(extent, -extent.left, -extent.top);		if width = natural then			width := view.fExtent.right - view.fExtent.left;		if height = natural then			height := view.fExtent.bottom - view.fExtent.top;		if beside <> nil then			bounds.left := beside.fFrame.fBounds.right		else			bounds.left := 0;		if below <> nil then			bounds.top := below.fFrame.fBounds.bottom		else			bounds.top := 0;		bounds.left := bounds.left + hOffset;		bounds.top := bounds.top + vOffset;		if width = fill then			bounds.right := extent.right		else			bounds.right := bounds.left + width;		if height = fill then			bounds.bottom := extent.bottom		else			bounds.bottom := bounds.top + height;		if frmVScroll in frameOpts then			bounds.right := bounds.right - 15;		if frmHScroll in frameOpts then			bounds.bottom := bounds.bottom - 15;		new(frame);		frame.IFrame(self, bounds, frameOpts);		frame.HaveView(view);	end;	function TXWindow.Changed: boolean;	begin		Changed := false;	end;	function TXWindow.Flush: boolean;	begin		flush := true;	end;	procedure TXWindow.Close;		var			answer: integer;			s: Str255;	begin		if Changed then begin				GetWTitle(fWMgrWindow, s);				ParamText(s, '', '', '');				answer := Ask(gStdIDBase + saveBeforeClosingAlertID);				if answer = cancel then					exit(Close);				if answer = yes then					if not Flush then						exit(Close);			end;		inherited Close;	end;end.