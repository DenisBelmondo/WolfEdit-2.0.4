unit UDAMain;{Main unit of GoofDA}interface	uses		ObjIntf, UGoof, UMyDA;	function Main (theDCE: DCtlPtr;									IOPB: ParmBlkPtr;									driveCall: Integer): OSErr;implementation	function Main;		var			oldPort: GrafPtr;			oldResFile: integer;		function Open (theDCE: DCtlPtr): OSErr;			var				window: TWindow;		begin			Open := noErr;			if not gAlreadyOpened then begin					if theDCE^.dCtlStorage = nil then begin {global allocation failed}							SysBeep(10);							Open := openErr;							exit(Open);						end;					gAlreadyOpened := true;					with theDCE^ do begin							gDCtlEntry := theDCE;							gWindow := OpenDA;							if gWindow <> nil then begin									WindowPeek(gWindow.fWMgrWindow)^.windowKind := theDCE^.dCtlRefNum;									dCtlWindow := Ptr(gWindow.fWMgrWindow);								end;						end;				end			else				gDA.ReOpen;		end; {Open}		function Prime (theDCE: DCtlPtr;										IOPB: ParmBlkPtr): OSErr;		begin			Prime := noErr;		end;		function Control (theDCE: DCtlPtr;										IOPB: ParmBlkPtr): OSErr;			var				e: EventRecord;				junk: boolean;		begin			Control := noErr;			case IOPB^.csCode of				accEvent: 					begin						BlockMove(IOPB^.ioMisc, @e, SizeOf(EventRecord));						gDA.AccEvent(e);					end;				accRun: 					begin						gDA.AccRun;						Exit(Control);	{Don't DoSetupMenus}					end;				accCursor: 					begin						junk := GetNextEvent(0, e);	{Get the event manager to make us a null event}						gDA.AccCursor(e);						Exit(Control);	{Don't DoSetupMenus}					end;				accMenu: 					gDA.AccMenu(IOPB^.csParam[0], IOPB^.csParam[1]);				accUndo: 					gDA.AccUndo;				accCut: 					gDA.AccCut;				accCopy: 					gDA.AccCopy;				accPaste: 					gDA.AccPaste;				accClear: 					gDA.AccClear;				otherwise			end;			if theDCE^.dCtlStorage <> nil then	{in case we closed ourselves - a delicate operation!}				gDA.DoSetupMenus;		end; {Control}		function Status (theDCE: DCtlPtr;										IOPB: ParmBlkPtr): OSErr;		begin			Status := noErr;		end;		function Close (theDCE: DCtlPtr;										IOPB: ParmBlkPtr): OSErr;		begin			gDA.Close;			Close := noErr;		end;	begin {Main}{$IFC NOT DAShell}		RememberA4;{$ENDC}		GetPort(oldPort);		oldResFile := CurResFile;		case driveCall of			0: 				Main := Open(theDCE);			1: 				Main := Prime(theDCE, IOPB);			2: 				Main := Control(theDCE, IOPB);			3: 				Main := Status(theDCE, IOPB);			4: 				Main := Close(theDCE, IOPB);		end;		UseResFile(oldResFile);		SetPort(oldPort);	end; {Main}end.