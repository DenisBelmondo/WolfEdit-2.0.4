unit UTEView;interface	uses		ObjIntf, UGoof;	type		TEInfo = record				theTextWidth: integer;				theMargins: Rect;				theFont: integer;				theSize: integer;				theStyle: Style;				theJust: integer;				theLineWrap: boolean;				theLineSpacing: integer;			end;		TTEView = object(TView)				fHTE: TEHandle;				fTextWidth: integer;				fMargins: Rect;				fLineSpacing: integer;				procedure TTEView.ITEView (itsFrame: TFrame);				procedure TTEView.Free;				override;				procedure TTEView.BeInFrame;				override;				procedure TTEView.InstallText (text: Handle;											disposeOld: boolean);				procedure TTEView.SetText (text: Ptr;											length: longint);				procedure TTEView.GetText (var text: CharsHandle;											var length: longint);				procedure TTEView.SetInfo (info: TEInfo);				procedure TTEView.GetInfo (var info: TEInfo);				procedure TTEView.RecalcFont;				procedure TTEView.AdjustLineHeight;				procedure TTEView.Idle;				override;				procedure TTEView.Click (var e: EventInfo);				override;				procedure TTEView.SetSelect (selStart, selEnd: longint);				procedure TTEView.HiliteSelection (entering: boolean);				override;				procedure TTEView.Key (var e: EventInfo);				override;				procedure TTEView.SetupMenus;				override;				procedure TTEView.DoMenuCommand (cmdNumber: integer);				override;				procedure TTEView.DoCut;				procedure TTEView.DoCopy;				procedure TTEView.DoPaste;				procedure TTEView.DoClear;				procedure TTEView.Insert (text: Ptr;											length: longint);				procedure TTEView.RevealSelection;				procedure TTEView.GetSelRect (var selRect: Rect);				procedure TTEView.GetSelLoc (selStart: integer;											selBot: boolean;											var selLoc: Point);				procedure TTEView.Draw;				override;				procedure TTEView.Focus;				override;				procedure TTEView.RecalcText;				procedure TTEView.RecalcExtent;				procedure TTEView.SetExtent (newExtent: Rect);				override;				procedure TTEView.Changed;				procedure TTEView.ClickLoopAction;			end;	procedure GetDefaultTEInfo (var info: TEInfo);implementation	var		gTEViewBeingClicked: TTEView;	{Used by ClickLoopProc}	function ClickLoopProc: boolean;	begin{$IFC DA AND NOT DAShell}		SetupA4;{$ENDC}		gTEViewBeingClicked.ClickLoopAction;		ClickLoopProc := true;{$IFC DA AND NOT DAShell}		RestoreA4;{$ENDC}	end;	procedure GetDefaultTEInfo (var info: TEInfo);	begin		with info do begin				SetRect(theMargins, 5, 5, 5, 5);				with gDummyPort^.portBits.bounds do					theTextWidth := right - left - theMargins.left - theMargins.right - 23;				theFont := applFont;				theSize := 12;				theStyle := [];				theJust := teJustLeft;				theLineWrap := true;				theLineSpacing := 0;			end;	end;	procedure TTEView.ITEView (itsFrame: TFrame);		var			destRect, viewRect: Rect;			infoF: FontInfo;			infoTE: TEInfo;			oldPort: GrafPtr;	begin		GetPort(oldPort);		SetPort(gDummyPort);		fHTE := nil;		GetDefaultTEInfo(infoTE);		with infoTE do begin				fMargins := theMargins;				fTextWidth := theTextWidth;				fLineSpacing := theLineSpacing;				TextFont(theFont);				TextSize(theSize);				TextFace(theStyle);			end;		GetFontInfo(infoF);		destRect.topLeft := fMargins.topLeft;		with destRect do begin				right := left + fTextWidth;				bottom := top + infoF.ascent + infoF.descent + infoF.leading + fLineSpacing;			end;		SetPt(viewRect.topLeft, 0, 0);		viewRect.botRight := destRect.botRight;		AddPt(fMargins.botRight, viewRect.botRight);		IView(itsFrame, nil, viewRect);		SetPort(gDummyPort);		fHTE := TENew(destRect, destRect);		TESetJust(infoTE.theJust, fHTE);		SetClikLoop(@ClickLoopProc, fHTE);		fTarget := self;		if fFrame <> nil then			fFrame.fLineSize.v := fHTE^^.lineHeight;		SetPort(oldPort);	end;	procedure TTEView.Free;	begin		TEDispose(fHTE);		inherited Free;	end;	procedure TTEView.BeInFrame;	begin		fHTE^^.inPort := fFrame.fWindow.fWMgrWindow;		fFrame.SetCursorHandle(GetCursor(iBeamCursor));		fFrame.fLineSize.v := fHTE^^.lineHeight;		inherited BeInFrame;	end;	procedure TTEView.InstallText (text: Handle;									disposeOld: boolean);	begin		if disposeOld then			DisposHandle(fHTE^^.hText);		fHTE^^.hText := text;		fHTE^^.teLength := GetHandleSize(text);		RecalcText;	end;	procedure TTEView.SetText (text: Ptr;									length: longint);	begin		TESetText(text, length, fHTE);		RecalcExtent;		Invalidate;	end;	procedure TTEView.GetText (var text: CharsHandle;									var length: longint);	begin		text := TEGetText(fHTE);		length := fHTE^^.teLength;	end;	procedure TTEView.GetInfo (var info: TEInfo);	begin		with info do begin				theTextWidth := fTextWidth;				theMargins := fMargins;				theFont := fHTE^^.txFont;				theSize := fHTE^^.txSize;				theStyle := fHTE^^.txFace;				theJust := fHTE^^.just;				theLineWrap := fHTE^^.crOnly >= 0;				theLineSpacing := fLineSpacing;			end;	end;	procedure TTEView.SetInfo (info: TEInfo);	begin		with info do begin				fTextWidth := theTextWidth;				fMargins := theMargins;				fHTE^^.txFont := theFont;				fHTE^^.txSize := theSize;				fHTE^^.txFace := theStyle;				fHTE^^.just := theJust;				if theLineWrap then					fHTE^^.crOnly := 1				else					fHTE^^.crOnly := -1;				fLineSpacing := theLineSpacing;			end;		RecalcFont;	end;	procedure TTEView.RecalcFont;		var			info: FontInfo;			oldPort: GrafPtr;	begin		GetPort(oldPort);		SetPort(gDummyPort);		TextFont(fHTE^^.txFont);		TextSize(fHTE^^.txSize);		TextFace(fHTE^^.txFace);		GetFontInfo(info);		fHTE^^.fontAscent := info.ascent;		fHTE^^.lineHeight := info.ascent + info.descent + info.leading;		AdjustLineHeight;		if fFrame <> nil then			fFrame.fLineSize.v := fHTE^^.lineHeight;		SetPort(oldPort);		RecalcText;	end;	procedure TTEView.AdjustLineHeight;	begin		with fHTE^^ do begin				fontAscent := fontAscent + fLineSpacing;				lineHeight := lineHeight + fLineSpacing;			end;		if fFrame <> nil then			fFrame.fLineSize.v := fHTE^^.lineHeight;	end;	procedure TTEView.Idle;	begin		Focus;		TEIdle(fHTE);		inherited Idle;	end;	procedure TTEView.Click (var e: EventInfo);	begin		BecomeTarget;		Focus;		gTEViewBeingClicked := self;		TEClick(e.where, e.theShiftKey, fHTE);	end;	procedure TTEView.SetSelect (selStart, selEnd: longint);	begin		Focus;		TESetSelect(selStart, selEnd, fHTE);	end;	procedure TTEView.HiliteSelection (entering: boolean);	begin		Focus;		if entering then			TEActivate(fHTE)		else			TEDeactivate(fHTE);	end;	procedure TTEView.Key (var e: EventInfo);	begin		Focus;		TEKey(e.theChar, fHTE);		Changed;		RecalcExtent;		RevealSelection;	end;	procedure TTEView.SetupMenus;	begin		if fHTE^^.selStart <> fHTE^^.selEnd then begin				EnableCmd(cutCmd);				EnableCmd(copyCmd);				EnableCmd(clearCmd);			end;		EnableCmd(pasteCmd);		inherited SetupMenus;	end;	procedure TTEView.DoMenuCommand (cmdNumber: integer);	begin		case cmdNumber of			cutCmd: 				DoCut;			copyCmd: 				DoCopy;			pasteCmd: 				DoPaste;			clearCmd: 				DoClear;			otherwise				inherited DoMenuCommand(cmdNumber);		end;	end;	procedure TTEView.DoCut;		var			junk: boolean;	begin		Focus;		TECut(fHTE);		Changed;		junk := DoTEToScrap;		RecalcExtent;		RevealSelection;	end;	procedure TTEView.DoCopy;		var			junk: boolean;	begin		Focus;		TECopy(fHTE);		Changed;		junk := DoTEToScrap;	end;	procedure TTEView.DoPaste;	begin		Focus;		if DoTEFromScrap then begin				TEPaste(fHTE);				Changed;				RecalcExtent;				RevealSelection;			end;	end;	procedure TTEView.DoClear;	begin		Focus;		TEDelete(fHTE);		Changed;		RecalcExtent;		RevealSelection;	end;	procedure TTEView.Insert (text: Ptr;									length: longint);	begin		Focus;		TEInsert(text, length, fHTE);		RecalcExtent;		RevealSelection;	end;	procedure TTEView.RevealSelection;		var			selRect: Rect;			minToSee: Point;	begin		if fFrame <> nil then begin				GetSelRect(selRect);				with selRect do					SetPt(minToSee, right - left, bottom - top);				fFrame.RevealRect(selRect, minToSee);			end;	end;	procedure TTEView.GetSelRect (var selRect: Rect);	begin		GetSelLoc(fHTE^^.selStart, false, selRect.topLeft);		GetSelLoc(fHTE^^.selEnd, true, selRect.botRight);	end;	procedure TTEView.GetSelLoc (selStart: integer;									selBot: boolean;									var selLoc: Point);		var			startOfCurrentLine: integer;			nLines: integer;			hText: Handle;			selLine: integer;			teH: TEHandle;			oldPort: GrafPtr;			info: FontInfo;	begin		GetPort(oldPort);		SetPort(gDummyPort);		TextFont(fHTE^^.txFont);		TextSize(fHTE^^.txSize);		TextFace(fHTE^^.txFace);		GetFontInfo(info);		teH := fHTE;		nLines := teH^^.nLines;		hText := fHTE^^.hText;		selLine := 0;		while (selLine + 1 < nLines) & (selStart >= teH^^.lineStarts[selLine + 1]) do			selLine := selLine + 1;		if (selStart = teH^^.teLength) & (CharsHandle(teH^^.hText)^^[selStart - 1] = chr(13)) then			selLine := selLine + 1;		selLoc.v := fExtent.top + fMargins.top + (teH^^.lineHeight * selLine);		if selBot then			selLoc.v := selLoc.v + teH^^.lineHeight + info.leading		else			selLoc.v := selLoc.v - info.leading;		selLoc.h := fExtent.left + fMargins.left;		if selLine < nLines then begin				startOfCurrentLine := teH^^.lineStarts[selLine];				selLoc.h := selLoc.h + TextWidth(QDPtr(hText^), startOfCurrentLine, selStart - startOfCurrentLine);			end;		SetPort(oldPort);	end;	procedure TTEView.Draw;		var			thePort: GrafPtr;	begin		GetPort(thePort);		EraseRect(thePort^.portRect);		TEUpdate(thePort^.portRect, fHTE);	end;	procedure TTEView.Focus;	begin		inherited Focus;		if fHTE <> nil then			GetPort(fHTE^^.inPort);	end;	procedure TTEView.RecalcText;	begin		RecalcExtent;		TECalText(fHTE);		RecalcExtent;		Invalidate;	end;	procedure TTEView.RecalcExtent;		var			newExtent: Rect;			newRight: integer;			newBottom: integer;	begin		newExtent.topLeft := fExtent.topLeft;		newExtent.right := fExtent.left + fMargins.left + fTextWidth + fMargins.right;		newExtent.bottom := fExtent.top + fMargins.top + fHTE^^.lineHeight * (fHTE^^.nLines + 1) + fMargins.bottom;		SetExtent(newExtent);	end;	procedure TTEView.SetExtent (newExtent: Rect);		var			newDestRect: Rect;	begin		newDestRect := newExtent;		AddPt(fMargins.topLeft, newDestRect.topLeft);		SubPt(fMargins.botRight, newDestRect.botRight);		with fHTE^^ do begin				destRect := newDestRect;				viewRect := newDestRect;				viewRect.bottom := newExtent.bottom;			end;		inherited SetExtent(newExtent);	end;	procedure TTEView.Changed;	begin		if fDocument <> nil then			fDocument.Changed;	end;	procedure TTEView.ClickLoopAction;		var			thePort: GrafPtr;	begin		AutoScroll;		GetPort(thePort);		RectRgn(gTempRgn, fHTE^^.viewRect);		SectRgn(gTempRgn, thePort^.clipRgn, thePort^.clipRgn);	end;end.