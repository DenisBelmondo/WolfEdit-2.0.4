unit UArtEditDialog;interfaceimplementation	uses		UEditArt;	const		paletteItem = 2;		imageItem = 3;		thumbNailItem = 4;		artPixWidth = 128;		artPixHeight = 128;	procedure TArtEditDialog.IArtEditDialog (itsID: integer; itsPalette: TImagePalette; itsMapList: TMapListDoc; thumbs: boolean);		var			artView: TArtView;			thumbNailView: TPixMapView;	begin		fTitlePrefix := nil;		IDocGetNewDialog(itsMapList, itsID);		fTitlePrefix := GetString(itsID);		fMapList := itsMapList;		fPalette := itsPalette;		if fPalette <> nil then			InstallItemView(paletteItem, fPalette, [frmBorder]);		new(artView);		artView.IArtView(itsMapList, artPixWidth, artPixHeight);		fArtView := artView;		InstallItemView(imageItem, fArtView, [frmBorder]);		fArtView.fNextHandler := nil;		if thumbs then begin				new(thumbNailView);				thumbNailView.IPixMapView(16, 16, nil);				fThumbNailView := thumbNailView;				InstallItemView(thumbNailItem, fThumbNailView, [frmBorder]);				fThumbNailView.fNextHandler := nil;			end		else			fThumbNailView := nil;		fCurrentItem := imageItem;		fCurrentArt := -1;		UpdateTitle;	end;	procedure TArtEditDialog.Free;	begin		UninstallArt;		inherited Free;	end;	procedure TArtEditDialog.UpdateTitle;	begin		if fTitlePrefix <> nil then			SetTitle(concat(fTitlePrefix^^, fMapList.fFileName));	end;	procedure TArtEditDialog.Deactivate;	begin		UninstallArt;		inherited Deactivate;	end;	procedure TArtEditDialog.FrameItem (itemNo: integer; pat: Pattern);		var			r: Rect;			oldPen: PenState;	begin		Focus;		GetItemBox(itemNo, r);		InsetRect(r, -3, -3);		GetPenState(oldPen);		PenNormal;		PenSize(2, 2);		PenPat(pat);		FrameRect(r);		SetPenState(oldPen);	end;	procedure TArtEditDialog.SetCurrentView (itemNo: integer);	begin		if fCurrentItem <> itemNo then begin				FrameItem(fCurrentItem, white);				fCurrentItem := itemNo;				FrameItem(itemNo, black);			end;	end;	procedure TArtEditDialog.DrawUserItem (itemNo: integer);	begin		if itemNo = fCurrentItem then			FrameItem(itemNo, black);	end;	procedure TArtEditDialog.ItemHit (var e: EventInfo; itemNo: integer);	begin		case itemNo of			imageItem, thumbNailItem: 				SetCurrentView(itemNo);			otherwise				inherited ItemHit(e, itemNo);		end;	end;	procedure TArtEditDialog.Content (var e: EventInfo);		var			p: Point;			f: TFrame;			v: TView;	begin		p := e.where;		ContainerToLocal(p);		f := FindFrame(p);		if f <> nil then begin				v := f.fView;				if (v = fArtView) | (v = fThumbNailView) then begin						Click(e);						exit(Content);					end;			end;		inherited Content(e);	end;	procedure TArtEditDialog.SetupMenus;	begin		inherited SetupMenus;		DisableCmd(undoCmd);		DisableCmd(cutCmd);		DisableCmd(copyCmd);		DisableCmd(pasteCmd);		DisableCmd(clearCmd);		if fCurrentArt >= 0 then			case fCurrentItem of				imageItem: 					fArtView.SetupMenus;				thumbNailItem: 					fThumbNailView.SetupMenus;			end;	end;	procedure TArtEditDialog.DoMenuCommand (cmdNumber: integer);		procedure Pass;		begin			UninstallArt;			inherited DoMenuCommand(cmdNumber);		end;	begin {TArtEditDialog.DoMenuCommand}		case fCurrentItem of			imageItem: 				case cmdNumber of					cutCmd: 						CutArt;					copyCmd: 						CopyArt;					pasteCmd: 						PasteArt;					clearCmd: 						ClearArt;					otherwise						Pass;				end;			thumbNailItem: 				case cmdNumber of					cutCmd: 						CutThumbNail;					copyCmd: 						CopyThumbNail;					pasteCmd: 						PasteThumbNail;					clearCmd: 						ClearThumbNail;					otherwise						Pass;				end;		end;	end;	procedure TArtEditDialog.CutArt;	begin		CopyArt;		ClearArt;	end;	procedure TArtEditDialog.CopyArt;	begin		fArtView.DoCopy;	end;	procedure TArtEditDialog.PasteArt;	begin		fArtView.DoPaste;		if (fThumbNailView <> nil) & not HasUserImage then			UpdateImage(fArtView.fGWorld, false);	end;	procedure TArtEditDialog.ClearArt;	begin		fArtView.DoClear;		if (fThumbNailView <> nil) & not HasUserImage then			UpdateImage(nil, false);	end;	procedure TArtEditDialog.CutThumbNail;	begin		CopyThumbnail;		ClearThumbNail;	end;	procedure TArtEditDialog.CopyThumbNail;	begin		fThumbNailView.DoCopy;	end;	procedure TArtEditDialog.PasteThumbnail;	begin		fThumbNailView.DoPaste;		HaveUserImage(true);		UpdateImage(fThumbNailView.fGWorld, true);	end;	procedure TArtEditDialog.ClearThumbnail;	begin		fThumbNailView.DoClear;		HaveUserImage(false);		if fArtView.fNonEmpty then			UpdateImage(fArtView.fGWorld, false)		else			UpdateImage(nil, false);	end;	procedure TArtEditDialog.SelectArt (artNo: integer);	begin		if artNo <> fCurrentArt then begin				UninstallArt;				fCurrentArt := artNo;				InstallArt;				InstallThumbNail;				SetCurrentView(imageItem);			end;	end;	procedure TArtEditDialog.InstallArt;	begin	{Override this}	end;	procedure TArtEditDialog.UninstallArt;	begin	{Override this}	end;	function TArtEditDialog.ArtImageType: CustomImageType;	begin		Panic('TArtEditDialog.ArtImageType', 'Not overridden');	end;	function TArtEditDialog.ArtImageCode: integer;	begin		Panic('TArtEditDialog.ArtImageCode', 'Not overridden');	end;	function TArtEditDialog.HasUserImage: boolean;	begin		HLock(Handle(fMapList.fImageCache));		if fCurrentArt >= 0 then			HasUserImage := ArtImageCode in fMapList.fImageCache.fUserMask[ArtImageType]		else			HasUserImage := false;		HUnlock(Handle(fMapList.fImageCache));	end;	procedure TArtEditDialog.HaveUserImage (val: Boolean);		procedure SetImageMask (var mask: CustomMaskSet; bit: integer; val: boolean);		begin			if val then				mask := mask + [bit]			else				mask := mask - [bit];		end;	begin {TArtEditDialog.HaveUserImage}		if fCurrentArt >= 0 then begin				fMapList.InstallOwnImageCache;				HLock(Handle(fMapList.fImageCache));				SetImageMask(fMapList.fImageCache.fUserMask[ArtImageType], ArtImageCode, val);				HUnlock(Handle(fMapList.fImageCache));				fMapList.Changed;			end;	end;	procedure TArtEditDialog.InstallFlag (value: boolean; itemNo: integer);	begin		SetItemValue(itemNo, ord(value));	end;	procedure TArtEditDialog.UninstallFlag (var flag: boolean; itemNo: integer);		var			value: boolean;	begin		value := GetItemValue(itemNo) <> 0;		if flag <> value then			if fMapList <> nil then				fMapList.Changed;		flag := value;	end;	procedure TArtEditDialog.UpdateImage (gworld: GWorldPtr; isThumbnail: boolean);	begin		ChangeImage(gworld, isThumbnail);		fPalette.InvalidateItem(fCurrentArt);	end;	procedure TArtEditDialog.ChangeImage (gworld: GWorldPtr; isThumbnail: boolean);	begin		Panic('TArtEditDialog.ChangeImage', 'Not overridden');	end;	procedure TArtEditDialog.ChangeDoorImage (code: integer; gworld: GWorldPtr; shrink: boolean);	begin		if shrink then			fMapList.InstallDoorImage(code, gworld)		else			ChangeObjectImage(code, gworld);	end;	procedure TArtEditDialog.ChangeObjectImage (code: integer; gworld: GWorldPtr);	begin		fMapList.InstallObjectImage(code, gworld);	end;	procedure TArtEditDialog.InstallThumbNail;		procedure PlotIt;		begin			EraseRect(thePort^.portRect);			case ArtImageType of				wallImage: 					fMapList.PlotWall(ArtImageCode, thePort^.portRect);				objectImage: 					fMapList.PlotObject(ArtImageCode, 0, thePort^.portRect);			end;		end;	begin {InstallThumbNail}		if (fMapList <> nil) & (fThumbNailView <> nil) then			if HasUserImage then begin					fThumbNailView.WithGWorld(PlotIt);					fThumbNailView.fNonEmpty := true;					fThumbNailView.Invalidate;				end			else begin					fThumbNailView.DoClear;					fThumbNailView.fChanged := false;				end;	end;{$IFC FALSE}	procedure TArtEditDialog.Present;		var			item: integer;	begin		Show;		item := DoModalDialog;	end;{$ENDC}end.