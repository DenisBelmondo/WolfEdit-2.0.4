unit UWolfDoc;interface	uses		QDOffscreen, UGoof, ULevel, UMapCells, UImageCache;  {$SETC SaveAsScenario = TRUE}	const		wolfEdit2DocType = 'W3L2';	{WolfEdit file format versions}		unknownVersion = 0;		thisVersion = 200;	{Wall art indexes}		numWallTypes = lastWallCode - firstWallCode + 1;		firstDoorArtIndex = 2 * numWallTypes + 1;	type		VersionHandle = ^VersionPtr;		VersionPtr = ^VersionRecord;		VersionRecord = record				wolfEdit: integer;				encounter: integer;				minEncounter: integer;			end;		IndexHandle = ^IndexPtr;		IndexPtr = ^IndexEntries;		WallArtHandle = Handle;		WallArtListEntry = record				darkFlag: boolean;				mirrorFlag: boolean;				art: WallArtHandle;			end;		WallArtListHandle = ^WallArtListPtr;		WallArtListPtr = ^WallArtList;		WallArtList = array[0..63] of WallArtListEntry;		ObjectArtHandle = ^ObjectArtPtr;		ObjectArtPtr = ^ObjectArtRecord;		ObjectArtRecord = record				expandedSize: LittleEndianWord;				data: packed array[0..9999] of 0..255;			end;		TObjectArtList = object				brgrID: integer;				art: ObjectArtHandle;				next: TObjectArtList;			end;		TBrgrList = object				brgrID: integer;				name: Str255;				brgr: Handle;				next: TBrgrList;			end;		TMusicRsrcList = object				id: integer;				name: string;				song: Handle;				midi: Handle;				next: TMusicRsrcList;			end;		TRsrcList = object				rType: ResType;				id: integer;				name: Str255;				data: Handle;				next: TRsrcList;			end;		TMapListDoc = object(TDocument)				fVersion: VersionRecord;				fName: StringHandle;				fPict: PicHandle;				fTitleMusic: integer;				fInterMusic: integer;				fNumLevels: integer;				fIndex: IndexHandle;				fWallArt: WallArtListHandle;				fObjectArt: TObjectArtList;				fView: TView;				fImageCache: TImageCache;				fOwnImageCache: boolean;				fImagesChanged: boolean;				fHasScenarioFile: boolean;				fScenarioVRefNum: integer;				fScenarioFileName: Str63;				fMusic: TMusicRsrcList;				fMiscBrgrs: TBrgrList;				fMiscRsrcs: TRsrcList;	{$IFC SaveAsScenario}				fFileCreator: OSType;	{$ENDC}				procedure IMapListDoc;				procedure DisposeContents;				override;				procedure MakeWindow;				override;				procedure SetNumLevels (n: integer);				procedure DoNew;				override;	{$IFC SaveAsScenario}				function DoSaveAs: boolean;				override;				function Write: boolean;				override;	{$ENDC}				procedure NewLevel;				procedure OpenLevel (num: integer);				procedure CloseLevel (num: integer);				procedure InsertLevel (num: integer; p: LevelInfoHandle; h: LevelHandle);				function CutLevel (num: integer; var p: LevelInfoHandle; var h: LevelHandle): OSErr;				function GetDiskSpaceNeeded (var dataBytes, rsrcBytes: longint): OSErr;				override;				procedure AugmentFileTypes (var numTypes: integer; var typeList: SFTypeList);				override;				function ReadFromFile (refNum: integer): OSErr;				override;				function WriteToFile (refNum: integer): OSErr;				override;				function UpdateResource (num: integer): OSErr;				procedure SetupMenus;				override;				procedure DoMenuCommand (cmdNumber: integer);				override;				procedure DoBuildScenario;				procedure DoRebuildScenario;				procedure BuildScenario;				function GetLevelName (levelNum: integer): Str255;				procedure WriteResources (installing: boolean; procedure Error (lev: integer; result: OSErr));				function CreateMapListResource (installing: boolean): MapListHandle;				function TMapListDoc.CreateMusicListResource: MusicListHandle;				procedure TMapListDoc.LevelError (doing: string; lev: integer; result: OSErr);				procedure SetEncounter (newEncounter: integer);				function GetWallArtList: WallArtListHandle;				function GetObjectArt (brgrID: integer): ObjectArtHandle;				procedure InstallObjectArt (brgrID: integer; art: ObjectArtHandle);				function GetMiscBrgr (id: integer): Handle;				procedure InstallMiscBrgr (h: Handle; id: integer);				function GetMiscRsrc (rType: ResType; id: integer): Handle;				procedure InstallMiscRsrc (h: Handle; rType: ResType; id: integer; name: string);				procedure PlotWall (code: integer; r: Rect);				procedure PlotObject (code, dir: integer; r: Rect);				procedure PlotSound (r: Rect);				function WallAvailable (code: integer): boolean;				function ObjectAvailable (code: integer): boolean;				function ItemAvailable (item: MapCell): boolean;				procedure InstallWallImage (code, view: integer; gWorld: GWorldPtr);				procedure InstallDoorImage (code: integer; gWorld: GWorldPtr);				procedure InstallObjectImage (code: integer; gWorld: GWorldPtr);				procedure UpdateImageViews;				procedure InstallOwnImageCache;				procedure Changed;				override;				function FlushWindows: boolean;			end;		TMap = object(TEvtHandler)				fMapList: TMapListDoc;				fLevelNumber: integer;				fChanged: boolean;				fView: TView;				fCells: TMapCells;				fStartPosSet: boolean;				fStartPos: Point;		{Init/Free}				procedure IMap (itsMapList: TMapListDoc; itsLevelNumber: integer);				procedure Free;				override;		{User Interface}				procedure MakeWindow;				procedure Close;				procedure SetupMenus;				override;		{Accessing}				function GetCell (cell: Point): MapCell;				procedure SetCell (cell: Point; code: MapCell);				function GetRowCol (row, col: integer): MapCell;				procedure SetRowCol (row, col: integer; code: MapCell);				procedure CopyFrom (src: TMapCells);				procedure CopyTo (dst: TMapCells);				procedure LoadFromResource (h: LevelHandle);				function TMap.CreateResource (var h: LevelHandle; name: string): OSErr;				procedure Changed;			end;		IndexEntry = record				info: LevelInfoHandle;				resource: LevelHandle;				map: TMap;			end;		IndexEntries = array[1..9999] of IndexEntry;implementationend.