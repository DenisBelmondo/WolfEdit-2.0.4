unit WolfFKEY;interface	procedure Main;implementation{$SETC Debug = FALSE}	const		couldntOpenAlrtID = 20000;		chooseScenarioDlogID = 20001;		wrongEncounterAlrtID = 20003;		unlockWarningAlrtID = 20004;		tooManyLevelsAlrtID = 20005;		scenAlreadyOpenAlrtID = 20006;		soundEffectListBrgrID = 135;		wallListBrgrID = 137;		mapListBrgrID = 146;		musicListBrgrID = 147;		encounterStrIDBase = 20000;	type		VersionHandle = ^VersionPtr;		VersionPtr = ^VersionRecord;		VersionRecord = record				wolfEdit: integer;				encounter: integer;				minEncounter: integer;			end;	var		fRefNum: integer;		done: boolean;{$IFC Debug}	procedure Jmp (addr: Ptr);	inline		$205F,		{MOVE.L (A7)+, A0}		$4E5E,		{UNLK	A6}		$4ED0;		{JMP	A0}	procedure Call (addr: Ptr);	begin		Jmp(addr);	end;{$ENDC}	function LMGetCurApRefNum: integer;		type			IntPtr = ^integer;	begin		LMGetCurApRefNum := IntPtr(Ptr($0900))^;	end;	procedure OpenScenario;		label			99;		var			fileName: string;{$IFC Debug}		procedure Fail (s: string);		begin			DebugStr(s);			goto 99;		end;{$ENDC}		procedure Abort;		begin			if fRefNum <> 0 then begin					CloseResFile(fRefNum);					fRefNum := 0;				end;			goto 99;		end;		procedure Check (result: OSErr);			var				number: Str255;				i: integer;		begin			if result <> noErr then begin					NumToString(result, number);					ParamText(fileName, number, '', '');					i := Alert(couldntOpenAlrtID, nil);					Abort;				end;		end;		procedure ScenarioAlreadyOpen;			var				i: integer;		begin			i := Alert(scenAlreadyOpenAlrtID, nil);			Abort;		end;		procedure OpenFile;			var				types: SFTypeList;				reply: StandardFileReply;				where: Point;		begin			types[0] := 'MAPS';			types[1] := 'W3L2';			SetPt(where, 0, 0);			CustomGetFile(nil, 2, types, reply, chooseScenarioDlogID, where, nil, nil, nil, nil, nil);			if not reply.sfGood then begin					done := true;					Abort;				end;			fileName := reply.sfFile.name;			fRefNum := FSpOpenResFile(reply.sfFile, fsRdPerm);			Check(ResError);		end;		procedure CheckVersion;			var				v: VersionHandle;				appEncounter, fileEncounter: integer;				code: Handle;				mess: StringHandle;				i: integer;		begin			UseResFile(fRefNum);			v := VersionHandle(Get1Resource('Vers', 128));			if v = nil then				exit(CheckVersion);			Check(ResError);			fileEncounter := v^^.encounter;			ReleaseResource(Handle(v));			code := GetResource('CODE', 1);			Check(ResError);			case GetHandleSize(code) of				58768: 					appEncounter := 1;				58086: 					appEncounter := 2;				otherwise					appEncounter := 3;			end;			if fileEncounter > appEncounter then begin					mess := GetString(encounterStrIDBase + fileEncounter);					ParamText(mess^^, '', '', '');					i := Alert(wrongEncounterAlrtID, nil);					Abort;				end;		end;		procedure ReloadResource (rType: ResType; rID: integer);			var				oldH, newH: Handle;				size: longint;				i: integer;				result: OSErr;		begin			UseResFile(LMGetCurApRefNum);			oldH := Get1Resource(rType, rID);			Check(ResError);			UseResFile(fRefNum);			newH := Get1Resource(rType, rID);			Check(ResError);			if (oldH <> nil) & (newH <> nil) & (oldH <> newH) then begin					size := GetHandleSize(newH);					SetHandleSize(oldH, size);					if MemError <> noErr then begin							i := Alert(tooManyLevelsAlrtID, nil);							Abort;						end;					BlockMove(newH^, oldH^, size);					ReleaseResource(newH);				end;		end;	begin {OpenScenario}		if CurResFile <> LMGetCurApRefNum then			ScenarioAlreadyOpen;		OpenFile;		CheckVersion;		ReloadResource('BRGR', wallListBrgrID);		ReloadResource('BRGR', mapListBrgrID);		ReloadResource('BRGR', musicListBrgrID);		ReloadResource('BRGR', soundEffectListBrgrID);		done := true;99:	end;	procedure Main;	begin		RememberA4;		SetUpA4;{$IFC Debug}		DebugStr('Wolf FKEY');		h := GetResource('WEDG', 20000);		if h = nil then			Fail('Could not get WEDG 20000');		MoveHHi(h);		HLock(h);		Call(h^);{$ENDC}		fRefNum := 0;		done := false;		while not done do			OpenScenario;		RestoreA4;	end;end.