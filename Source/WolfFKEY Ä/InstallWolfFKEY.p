program InstallWolfFKEY;{$SETC Debug = FALSE}	const		installFailedAlrtID = 128;		couldntOpenAlrtID = 129;		installedAlrtID = 131;		installingDlogID = 128;		locateFileDlogID = 4000;		dfltSrcFileName = 'Wolf FKEY';		dfltDestFileName = 'Wolfenstein 3D';		mapListBrgrID = 146;		musicListBrgrID = 147;	var		appResFile, srcResFile, dstResFile: integer;		srcFileName, dstFileName: string;		infoDlog: DialogPtr;	procedure Check (result: OSErr; alrtID: integer; param: string);		var			i: integer;	begin		if result <> noErr then begin				UseResFile(appResFile);				ParamText(param, StringOf(result : 1), '', '');				i := Alert(alrtID, nil);				ExitToShell;			end;	end;	var		gCreator: OSType;	function StdLocateFileFilter (p: ParmBlkPtr): boolean;	begin		StdLocateFileFilter := p^.ioFlFndrInfo.fdCreator <> gCreator;	end;	function LocateFileFilter (p: ParmBlkPtr; q: Ptr): boolean;	begin		LocateFileFilter := p^.ioFlFndrInfo.fdCreator <> gCreator;	end;	function LocateFile (var name: string; fType, fCreator: OSType; perm: integer): integer;		var			w, i, n: integer;			param: AppFile;			nTypes: integer;			types: SFTypeList;			reply: StandardFileReply;			where: Point;			info: FInfo;	begin	{First, look in app parameters}		CountAppFiles(w, n);		for i := 1 to n do begin				GetAppFiles(i, param);				if param.fType = fType then begin						if GetFInfo(param.fName, param.vRefNum, info) = noErr then							if info.fdCreator = fCreator then begin									LocateFile := HOpenResFile(param.vRefNum, 0, param.fName, perm);									Check(ResError, couldntOpenAlrtID, param.fName);									name := param.fName;									exit(LocateFile);								end;					end;			end;	{Second, look for the default name}		LocateFile := HOpenResFile(0, 0, name, perm);		if ResError <> fnfErr then begin				Check(ResError, couldntOpenAlrtID, name);				exit(LocateFile);			end;	{Third, ask the user}		nTypes := 1;		types[0] := fType;		if fType = 'APPL' then begin				nTypes := 2;				types[1] := 'adrp';			end;		SetPt(where, -1, -1);		gCreator := fCreator;		ParamText(name, '', '', '');		UseResFile(appResFile);		CustomGetFile(@LocateFileFilter, nTypes, types, reply, locateFileDlogID, where, nil, nil, nil, nil, nil);{StandardGetFile(@StdLocateFileFilter, nTypes, types, reply);}		if reply.sfGood then begin				name := reply.sfFile.name;				LocateFile := FSpOpenResFile(reply.sfFile, fsRdWrPerm);				Check(ResError, couldntOpenAlrtID, reply.sfFile.name);			end		else			ExitToShell;	end;	procedure OpenDest;	begin		dstFileName := dfltDestFileName;		dstResFile := LocateFile(dstFileName, 'APPL', 'WOLF', fsRdWrPerm);	end;	procedure CopyResources;		var			i, j, nTypes, nRes: integer;			rID: integer;			rType: ResType;			rName: Str255;			h, h2: Handle;		procedure CheckI (result: OSErr);		begin			Check(result, installFailedAlrtID, '');		end;	begin		UseResFile(srcResFile);		nTypes := Count1Types;		for i := 1 to nTypes do begin				UseResFile(srcResFile);				Get1IndType(rType, i);				if rType <> 'vers' then begin						nRes := Count1Resources(rType);						for j := 1 to nRes do begin								UseResFile(srcResFile);								h := Get1IndResource(rType, j);								CheckI(ResError);								GetResInfo(h, rID, rType, rName);								DetachResource(h);								UseResFile(dstResFile);								SetResLoad(false);								h2 := Get1Resource(rType, rID);								SetResLoad(true);								if h2 <> nil then begin										RmveResource(h2);										DisposHandle(h2);									end;								AddResource(h, rType, rID, rName);								CheckI(ResError);								ReleaseResource(h);								CheckI(ResError);							end;					end;			end;	end;	procedure CloseDest;	begin		CloseResFile(dstResFile);		Check(ResError, installFailedAlrtID, '');	end;	procedure ShowInfoDlog;	begin		UseResFile(appResFile);		infoDlog := GetNewDialog(installingDlogID, nil, WindowPtr(-1));		ShowWindow(infoDlog);	end;	procedure RemoveInfoDlog;	begin		if infoDlog <> nil then begin				DisposeDialog(infoDlog);				infoDlog := nil;			end;	end;	procedure SayInstalling;		var			curs: CursHandle;	begin		ParamText(srcFileName, dstFileName, '', '');		DrawDialog(infoDlog);		curs := GetCursor(watchCursor);		SetCursor(curs^^);	end;	procedure SayInstalled;		var			i: integer;	begin		UseResFile(appResFile);		SetCursor(arrow);		i := Alert(installedAlrtID, nil);	end;	procedure Install (dfltSrcFileName: string; fType: OSType);	begin		srcFileName := dfltSrcFileName;		srcResFile := LocateFile(srcFileName, fType, 'WFKi', fsRdPerm);		SayInstalling;		CopyResources;		CloseResFile(srcResFile);	end;	procedure Resize (rType: ResType; rID: integer; newSize: longint);		var			h: Handle;	begin		UseResFile(dstResFile);		h := Get1Resource(rType, rID);		Check(ResError, installFailedAlrtID, dstFileName);		HUnlock(h);		SetHandleSize(h, newSize);		Check(MemError, installFailedAlrtID, dstFileName);		ChangedResource(h);		Check(MemError, installFailedAlrtID, dstFileName);	end;begin	appResFile := CurResFile;	infoDlog := nil;	OpenDest;	ShowInfoDlog;	Install('Wolf FKEY', 'FKEY');	Resize('BRGR', mapListBrgrID, 1004);	Resize('BRGR', musicListBrgrID, 204);{$IFC Debug}	Install('Wolf WEDG', 'WEDG');{$ENDC}	CloseDest;	RemoveInfoDlog;	SayInstalled;end.