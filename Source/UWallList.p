unit UWallList;interface	type		WallListEntry = record				word0, word1: integer;			end;		WallListHandle = ^WallListPtr;		WallListPtr = ^WallListResource;		WallListResource = record				numWords: integer;				entries: array[1..999] of WallListEntry;			end;	var		gValidCodes: CodeSet;	procedure IUWallList;implementation	procedure IUWallList;		var			code: integer;			h: Handle;			wl: WallListHandle;			refNum: integer;		procedure EnableCode;		begin			gValidCodes := gValidCodes + [code];		end;		procedure Probe (id: integer);			var				h: Handle;		begin			h := GetResource('BRGR', id);			if h <> nil then begin					EnableCode;					ReleaseResource(h);				end;		end;	begin		gValidCodes := [];		refNum := OpenResFile('::Wolf 3dª Hacking Copy');		if ResError <> noErr then			exit(IUMapPalette);		wl := WallListHandle(GetResource('BRGR', 137));		for code := 129 to 128 + wl^^.numWords div 2 do			with wl^^.entries[code - 128] do				if (word0 <> 0) | (word1 <> 0) then					EnableCode;		ReleaseResource(Handle(wl));		SetResLoad(false);		for code := 1 to 127 do			Probe(539 + code);		SetResLoad(true);		CloseResFile(refNum);	end;end.